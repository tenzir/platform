name: AWS Marketplace Release

permissions:
  id-token: write
  packages: write

on:
  # Trigger on release published
  release:
    types: [published]

  # Manual dispatch for testing
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Platform version to publish'
        required: true
        type: string
      api_image:
        description: 'Name of an existing Platform API Docker image to use (leave empty to build fresh containers)'
        required: false
        type: string
      gateway_image:
        description: 'Name of an existing Platform Gateway Docker image to use (leave empty to build fresh containers)'
        required: false
        type: string
      ui_image:
        description: 'Name of an existing Platform UI Docker image to use (leave empty to build fresh containers)'
        required: false
        type: string


jobs:
  marketplace-release:
    name: Build and Push AWS Marketplace Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Get release information and validate inputs
        id: get_release
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual dispatch - use provided inputs
            RELEASE_TAG="${{ github.event.inputs.version_tag }}"
            API_IMAGE="${{ github.event.inputs.api_image }}"
            GATEWAY_IMAGE="${{ github.event.inputs.gateway_image }}"
            UI_IMAGE="${{ github.event.inputs.ui_image }}"

            # Validate that either all or none of the image tags are specified
            IMAGE_COUNT=0
            [ -n "$API_IMAGE" ] && IMAGE_COUNT=$((IMAGE_COUNT + 1))
            [ -n "$GATEWAY_IMAGE" ] && IMAGE_COUNT=$((IMAGE_COUNT + 1))
            [ -n "$UI_IMAGE" ] && IMAGE_COUNT=$((IMAGE_COUNT + 1))

            if [ $IMAGE_COUNT -ne 0 ] && [ $IMAGE_COUNT -ne 3 ]; then
              echo "Error: Either all or none of the image tags must be specified"
              echo "Provided: api_image='$API_IMAGE', gateway_image='$GATEWAY_IMAGE', ui_image='$UI_IMAGE'"
              exit 1
            fi

            # Determine if we need to build containers
            if [ $IMAGE_COUNT -eq 0 ]; then
              echo "build_containers=true" >> $GITHUB_OUTPUT
              API_IMAGE="ghcr.io/tenzir/platform-api-aws:${RELEASE_TAG}"
              GATEWAY_IMAGE="ghcr.io/tenzir/platform-gateway-aws:${RELEASE_TAG}"
              UI_IMAGE="ghcr.io/tenzir/app:${RELEASE_TAG}"
            else
              echo "build_containers=false" >> $GITHUB_OUTPUT
            fi
          else
            # Release trigger - build fresh containers
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            echo "build_containers=true" >> $GITHUB_OUTPUT
            API_IMAGE="ghcr.io/tenzir/platform-api-aws:${RELEASE_TAG}"
            GATEWAY_IMAGE="ghcr.io/tenzir/platform-gateway-aws:${RELEASE_TAG}"
            UI_IMAGE="ghcr.io/tenzir/app:${RELEASE_TAG}"
          fi
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "api_image=${API_IMAGE}" >> $GITHUB_OUTPUT
          echo "gateway_image=${GATEWAY_IMAGE}" >> $GITHUB_OUTPUT
          echo "ui_image=${UI_IMAGE}" >> $GITHUB_OUTPUT

      - name: Checkout repository
        if: steps.get_release.outputs.build_containers == 'true'
        uses: actions/checkout@v4

      - name: Configure ssh-agent for app submodule
        if: steps.get_release.outputs.build_containers == 'true'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TENZIR_APP_DEPLOY_KEY }}

      - name: Update app submodule
        if: steps.get_release.outputs.build_containers == 'true'
        run: |
          git submodule update --init components/app
          app_commit=$(git -C components/app rev-parse HEAD)
          echo "app_commit=$app_commit" >> $GITHUB_ENV

      - name: Configure ssh-agent for tenant-manager submodule
        if: steps.get_release.outputs.build_containers == 'true'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TENZIR_EVENT_HORIZON_DEPLOY_KEY }}

      - name: Update tenant-manager submodule
        if: steps.get_release.outputs.build_containers == 'true'
        run: |
          git submodule update --init components/tenant-manager

      - name: Build Platform API AWS Docker image
        if: steps.get_release.outputs.build_containers == 'true'
        env:
          IMAGE: ${{ steps.get_release.outputs.api_image }}
        run: |
          docker build \
            --target platform-api \
            -t "${IMAGE}" \
            -f components/tenant-manager/platform/tenant_manager/Dockerfile.aws-lambda \
            components/tenant-manager/platform/tenant_manager

      - name: Build Platform Gateway AWS Docker image
        if: steps.get_release.outputs.build_containers == 'true'
        env:
          IMAGE: ${{ steps.get_release.outputs.gateway_image }}
        run: |
          docker build \
            --target platform-gateway \
            -t "${IMAGE}" \
            -f components/tenant-manager/platform/tenant_manager/Dockerfile \
            components/tenant-manager/platform/tenant_manager

      - name: Build Platform UI Docker image
        if: steps.get_release.outputs.build_containers == 'true'
        env:
          IMAGE: ${{ steps.get_release.outputs.ui_image }}
        run: |
          docker build \
            --target runtime-aws \
            --build-arg GIT_COMMIT_HASH=${{ env.app_commit }} \
            -t "${IMAGE}" \
            -f components/app/Dockerfile \
            components/app

      # Login to ghcr to pull the existing images (only when not building)
      - name: Login to GitHub Container Registry
        if: steps.get_release.outputs.build_containers == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}

      # In theory it should be possible to assume this role directly, at least its
      # trust policy is permitting this. But somewhere along the stack there's a check
      # that the OIDC provider is in the same AWS account as the role we're trying to
      # assume, so we're using this two-step chain as a workaround.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::622024652768:role/ecr-tenzir-ce-github-access
          aws-region: eu-west-1
          role-session-name: GithubActionsCISession
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::390844774768:role/aws-marketplace-github-access
          aws-region: eu-west-1
          role-session-name: GithubActionsCISession
          role-skip-session-tagging: true
          role-chaining: true

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-east-1
        with:
          registries: 709825985650

      - name: Pull and Tag Platform API Image
        if: steps.get_release.outputs.build_containers == 'false'
        env:
          IMAGE: ${{ steps.get_release.outputs.api_image }}
        run: |
          docker pull "${IMAGE}"

      - name: Pull and Tag Platform Gateway Image
        if: steps.get_release.outputs.build_containers == 'false'
        env:
          IMAGE: ${{ steps.get_release.outputs.gateway_image }}
        run: |
          docker pull "${IMAGE}"

      - name: Pull and Tag Platform UI Image
        if: steps.get_release.outputs.build_containers == 'false'
        env:
          IMAGE: ${{ steps.get_release.outputs.ui_image }}
        run: |
          docker pull "${IMAGE}"

      - name: Tag and Push Platform API Image to Marketplace ECR
        env:
          IMAGE: ${{ steps.get_release.outputs.api_image }}
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        run: |
          docker tag "${IMAGE}" 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-api:${RELEASE_TAG}
          docker push 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-api:${RELEASE_TAG}

      - name: Tag and Push Platform Gateway Image to Marketplace ECR
        env:
          IMAGE: ${{ steps.get_release.outputs.gateway_image }}
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        run: |
          docker tag "${IMAGE}" 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-gateway:${RELEASE_TAG}
          docker push 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-gateway:${RELEASE_TAG}

      - name: Tag and Push Platform UI Image to Marketplace ECR
        env:
          IMAGE: ${{ steps.get_release.outputs.ui_image }}
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        run: |
          docker tag "${IMAGE}" 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-ui:${RELEASE_TAG}
          docker push 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-ui:${RELEASE_TAG}

      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Upload CloudFormation template to S3
        env:
          AWS_REGION: eu-west-1
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        run: |
          # Replace v0.00.0 with the actual release version
          sed "s/v0.00.0/${RELEASE_TAG}/g" examples/aws/cf/tenzir-platform.yml > /tmp/tenzir-platform-${RELEASE_TAG}.yaml

          # Upload to S3
          aws s3 cp /tmp/tenzir-platform-${RELEASE_TAG}.yaml s3://tenzir-marketplace-resources/tenzir-platform-${RELEASE_TAG}.yaml \
            --region ${AWS_REGION}

      - name: Add new version to AWS Marketplace
        env:
          AWS_REGION: us-east-1
          PRODUCT_ID: prod-qbbuiaxj3izce
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        # This is following the process described here:
        # https://docs.aws.amazon.com/marketplace/latest/APIReference/work-with-container-products.html#working-with-container-products
        run: |
          cat > add-version.json <<EOF
          {
            "Catalog": "AWSMarketplace",
            "ChangeSet": [
              {
                "ChangeType": "AddDeliveryOptions",
                "Entity": {
                  "Identifier": "$PRODUCT_ID",
                  "Type": "ContainerProduct@1.0"
                },
                "DetailsDocument": {
                  "Version": {
                    "VersionTitle": "Tenzir Platform $RELEASE_TAG",
                    "ReleaseNotes": "See https://docs.tenzir.com/changelog/platform/ for release notes."
                  },
                  "DeliveryOptions": [
                    {
                      "DeliveryOptionTitle": "ECS Container images delivery option",
                      "Details": {
                        "EcrDeliveryOptionDetails": {
                          "ContainerImages": [
                            "709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-api:$RELEASE_TAG",
                            "709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-gateway:$RELEASE_TAG",
                            "709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-ui:$RELEASE_TAG"
                          ],
                          "CompatibleServices": ["ECS"],
                          "Description": "Deploy the Tenzir Platform API, Gateway, and UI containers to manage your Tenzir security data pipelines within your AWS environment. The Platform API provides REST endpoints for tenant management, the Platform Gateway handles real-time WebSocket connections, and the Platform UI provides the web interface for managing your deployments.",
                          "UsageInstructions": "Follow our detailed AWS instructions at https://docs.tenzir.com/guides/platform-setup/deploy-on-aws/ to deploy your Tenzir Platform components.\n\n****CloudFormation Deployment**: Deploy a single Tenzir Node into ECS: https://console.aws.amazon.com/cloudformation/home?region=eu-west-1#/stacks/new?templateURL=https://tenzir-marketplace-resources.s3.eu-west-1.amazonaws.com/tenzir-platform-${RELEASE_TAG}.yaml\n\n**Terraform Deployment**: Take a look at our public example project at https://github.com/tenzir/platform/tree/main/examples/aws/terraform"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
          EOF
          aws marketplace-catalog start-change-set \
            --region "$AWS_REGION" \
            --cli-input-json file://add-version.json
