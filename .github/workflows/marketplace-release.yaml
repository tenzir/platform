name: AWS Marketplace Release

permissions:
  id-token: write

on:
  # Trigger after the platform release workflow completes for releases
  workflow_run:
    workflows: ["Create Sovereign Edition containers and also push a new production Cloud Deployment"]
    types: [completed]
    branches: [main]

  # Manual dispatch for testing
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Platform version to publish'
        required: true
        type: string
      api_image:
        description: 'Name of an existing Platform API Docker image to use (required)'
        required: true
        type: string
      gateway_image:
        description: 'Name of an existing Platform Gateway Docker image to use (required)'
        required: true
        type: string
      ui_image:
        description: 'Name of an existing Platform UI Docker image to use (required)'
        required: true
        type: string


jobs:
  marketplace-release:
    name: Build and Push AWS Marketplace Images
    runs-on: ubuntu-latest
    # Only run for successful release builds or manual dispatch
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.event == 'release')
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Get release information
        id: get_release
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual dispatch - use provided inputs
            RELEASE_TAG="${{ github.event.inputs.version_tag }}"
            API_IMAGE="${{ github.event.inputs.api_image }}"
            GATEWAY_IMAGE="${{ github.event.inputs.gateway_image }}"
            UI_IMAGE="${{ github.event.inputs.ui_image }}"
          else
            # workflow_run trigger - extract from head_branch
            RELEASE_TAG="${{ github.event.workflow_run.head_branch }}"
            API_IMAGE="ghcr.io/tenzir/platform-api-aws:${RELEASE_TAG}"
            GATEWAY_IMAGE="ghcr.io/tenzir/platform-gateway-aws:${RELEASE_TAG}"
            UI_IMAGE="ghcr.io/tenzir/app:${RELEASE_TAG}"
          fi
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "api_image=${API_IMAGE}" >> $GITHUB_OUTPUT
          echo "gateway_image=${GATEWAY_IMAGE}" >> $GITHUB_OUTPUT
          echo "ui_image=${UI_IMAGE}" >> $GITHUB_OUTPUT

      # Login to ghcr to pull the existing images
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}

      # In theory it should be possible to assume this role directly, at least its
      # trust policy is permitting this. But somewhere along the stack there's a check
      # that the OIDC provider is in the same AWS account as the role we're trying to
      # assume, so we're using this two-step chain as a workaround.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::622024652768:role/ecr-tenzir-ce-github-access
          aws-region: eu-west-1
          role-session-name: GithubActionsCISession
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::390844774768:role/aws-marketplace-github-access
          aws-region: eu-west-1
          role-session-name: GithubActionsCISession
          role-skip-session-tagging: true
          role-chaining: true

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-east-1
        with:
          registries: 709825985650

      - name: Tag and Push Platform API Image to Marketplace ECR
        env:
          IMAGE: ${{ steps.get_release.outputs.api_image }}
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        run: |
          docker pull "${IMAGE}"
          docker tag "${IMAGE}" 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-api:${RELEASE_TAG}
          docker push 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-api:${RELEASE_TAG}

      - name: Tag and Push Platform Gateway Image to Marketplace ECR
        env:
          IMAGE: ${{ steps.get_release.outputs.gateway_image }}
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        run: |
          docker pull "${IMAGE}"
          docker tag "${IMAGE}" 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-gateway:${RELEASE_TAG}
          docker push 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-gateway:${RELEASE_TAG}

      - name: Tag and Push Platform UI Image to Marketplace ECR
        env:
          IMAGE: ${{ steps.get_release.outputs.ui_image }}
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        run: |
          docker pull "${IMAGE}"
          docker tag "${IMAGE}" 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-ui:${RELEASE_TAG}
          docker push 709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-ui:${RELEASE_TAG}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add new version to AWS Marketplace
        env:
          AWS_REGION: us-east-1
          PRODUCT_ID: prod-qbbuiaxj3izce
          RELEASE_TAG: ${{ steps.get_release.outputs.release_tag }}
        # This is following the process described here:
        # https://docs.aws.amazon.com/marketplace/latest/APIReference/work-with-container-products.html#working-with-container-products
        run: |
          cat > add-version.json <<EOF
          {
            "Catalog": "AWSMarketplace",
            "ChangeSet": [
              {
                "ChangeType": "AddDeliveryOptions",
                "Entity": {
                  "Identifier": "$PRODUCT_ID",
                  "Type": "ContainerProduct@1.0"
                },
                "DetailsDocument": {
                  "Version": {
                    "VersionTitle": "Tenzir Platform $RELEASE_TAG",
                    "ReleaseNotes": "See https://docs.tenzir.com/changelog/platform/ for release notes."
                  },
                  "DeliveryOptions": [
                    {
                      "DeliveryOptionTitle": "ECS Container images delivery option",
                      "Details": {
                        "EcrDeliveryOptionDetails": {
                          "ContainerImages": [
                            "709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-api:$RELEASE_TAG",
                            "709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-gateway:$RELEASE_TAG",
                            "709825985650.dkr.ecr.us-east-1.amazonaws.com/tenzir/tenzir-platform-ui:$RELEASE_TAG"
                          ],
                          "CompatibleServices": ["ECS"],
                          "Description": "Deploy the Tenzir Platform API, Gateway, and UI containers to manage your Tenzir security data pipelines within your AWS environment. The Platform API provides REST endpoints for tenant management, the Platform Gateway handles real-time WebSocket connections, and the Platform UI provides the web interface for managing your deployments.",
                          "UsageInstructions": "Follow our detailed AWS instructions at https://docs.tenzir.com/guides/platform-setup/deploy-on-aws/ to deploy your Tenzir Platform components."
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
          EOF
          aws marketplace-catalog start-change-set \
            --region "$AWS_REGION" \
            --cli-input-json file://add-version.json
