# A completely self-contained configuration using a bundled
# postgres database and a single hard-coded user.
#
# Useful for prototyping or local development with no available
# infrastructure. Container ports are mapped to the range 3000-3003.
#
# **NOTE**: If you want to have multiple users or integrate your own
#           external IdP, please start from the `keycloak` example
#           instead.

services:
  platform:
    # image: ghcr.io/tenzir/platform:${TENZIR_PLATFORM_VERSION}
    build: ../../components/tenant-manager/platform/tenant_manager/
    command: ["tenant_manager/rest/server/local.py"]
    environment:
      - BASE_PATH=
      - GATEWAY_WS_ENDPOINT=${TENZIR_PLATFORM_CONTROL_ENDPOINT}
      - GATEWAY_HTTP_ENDPOINT=http://websocket-gateway:5000
      - TENANT_MANAGER_DISABLE_LOCAL_DEMO_NODES=${TENZIR_PLATFORM_DISABLE_LOCAL_DEMO_NODES}
      - TENZIR_DEMO_NODE_IMAGE=${TENZIR_PLATFORM_DEMO_NODE_IMAGE:-tenzir/tenzir-demo:latest}
      - TENANT_MANAGER_APP_API_KEY=${TENZIR_PLATFORM_INTERNAL_APP_API_KEY}
      - TENANT_MANAGER_TENANT_TOKEN_ENCRYPTION_KEY=${TENZIR_PLATFORM_INTERNAL_TENANT_TOKEN_ENCRYPTION_KEY}
      - TENANT_MANAGER_AUTH__SINGLE_USER_MODE=true
      - TENANT_MANAGER_AUTH__ISSUER_URL=http://platform:5000/oidc
      - TENANT_MANAGER_AUTH__PUBLIC_ENDPOINTS_PREFIX=${TENZIR_PLATFORM_API_ENDPOINT}/oidc
      - TENANT_MANAGER_AUTH__APP_AUDIENCE=tenzir-app
      - TENANT_MANAGER_AUTH__APP_REDIRECT_URLS=${TENZIR_PLATFORM_DOMAIN}/login/oauth/callback
      - TENANT_MANAGER_AUTH__CLI_AUDIENCE=tenzir-cli
      - STORE__TYPE=${TENZIR_PLATFORM_STORE_TYPE}
      - STORE__POSTGRES_URI=postgresql://${TENZIR_PLATFORM_POSTGRES_USER}:${TENZIR_PLATFORM_POSTGRES_PASSWORD}@${TENZIR_PLATFORM_POSTGRES_HOSTNAME}/${TENZIR_PLATFORM_POSTGRES_DB}
      # seaweedfs s3 connection
      - TENANT_MANAGER_SIDEPATH_BUCKET_NAME=${TENZIR_PLATFORM_INTERNAL_BUCKET_NAME}
      - BLOB_STORAGE__ENDPOINT_URL=http://seaweed:8333
      - BLOB_STORAGE__PUBLIC_ENDPOINT_URL=${TENZIR_PLATFORM_BLOBS_ENDPOINT}
      - BLOB_STORAGE__ACCESS_KEY_ID=${TENZIR_PLATFORM_INTERNAL_ACCESS_KEY_ID}
      - BLOB_STORAGE__SECRET_ACCESS_KEY=${TENZIR_PLATFORM_INTERNAL_SECRET_ACCESS_KEY}
    volumes:
      # Mounting the docker socket is only required if local demo nodes are enabled.
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 3001:5000
    depends_on:
      websocket-gateway:
        condition: service_started
      postgres:
        condition: service_healthy

  websocket-gateway:
    image: ghcr.io/tenzir/platform:${TENZIR_PLATFORM_VERSION:-latest}
    environment:
      - BASE_PATH=
      - TENZIR_PROXY_TIMEOUT=60
      - TENANT_MANAGER_APP_API_KEY=${TENZIR_PLATFORM_INTERNAL_APP_API_KEY}
      - TENANT_MANAGER_TENANT_TOKEN_ENCRYPTION_KEY=${TENZIR_PLATFORM_INTERNAL_TENANT_TOKEN_ENCRYPTION_KEY}
      - STORE__TYPE=${TENZIR_PLATFORM_STORE_TYPE}
      - STORE__POSTGRES_URI=postgresql://${TENZIR_PLATFORM_POSTGRES_USER}:${TENZIR_PLATFORM_POSTGRES_PASSWORD}@${TENZIR_PLATFORM_POSTGRES_HOSTNAME}/${TENZIR_PLATFORM_POSTGRES_DB}
    postgres:
      condition: service_healthy
    command: ["tenant_manager/ws/server/local.py"]
    ports:
      - 3002:5000

  postgres:
    image: postgres:14.5
    restart: always
    environment:
      - POSTGRES_USER=${TENZIR_PLATFORM_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TENZIR_PLATFORM_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TENZIR_PLATFORM_POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'pg_isready -U postgres'
      interval: 10s
      timeout: 5s
      retries: 5

  # Note the ~25 seconds startup delay before the seaweed server
  # becomes ready.
  seaweed:
    image: ghcr.io/tenzir/tenzir-seaweed:${TENZIR_PLATFORM_VERSION:-latest}
    environment:
      - TENZIR_PLATFORM_INTERNAL_ACCESS_KEY_ID
      - TENZIR_PLATFORM_INTERNAL_SECRET_ACCESS_KEY
      - TENZIR_PLATFORM_INTERNAL_BUCKET_NAME
    command: ["server", "-dir=/var/lib/seaweedfs", "-s3", "-s3.config=/config.json"]
    volumes:
      - seaweed_data:/var/lib/seaweedfs
    ports:
      - '3003:8333'

  app:
    # image: ghcr.io/tenzir/app:${TENZIR_PLATFORM_VERSION:-latest}
    build: ../../components/app
    environment:
      - AUTH_TRUST_HOST=true
      - PUBLIC_ENABLE_HIGHLIGHT=false
      - ORIGIN=${TENZIR_PLATFORM_DOMAIN}
      - PRIVATE_OIDC_PROVIDER_NAME=tenzir
      - PRIVATE_OIDC_PROVIDER_CLIENT_ID=tenzir-app
      - PRIVATE_OIDC_PROVIDER_CLIENT_SECRET=xxxx
      - PRIVATE_OIDC_PROVIDER_ISSUER_URL=http://platform:5000/oidc
      - PUBLIC_OIDC_PROVIDER_ID=tenzir
      - PUBLIC_WEBSOCKET_GATEWAY_ENDPOINT=${TENZIR_PLATFORM_CONTROL_ENDPOINT}
      - PRIVATE_USER_ENDPOINT=http://platform:5000/user
      - PRIVATE_WEBAPP_ENDPOINT=http://platform:5000/webapp
      - PRIVATE_WEBAPP_KEY=${TENZIR_PLATFORM_INTERNAL_APP_API_KEY}
      - AUTH_SECRET=${TENZIR_PLATFORM_INTERNAL_AUTH_SECRET}
      - PUBLIC_DISABLE_DEMO_NODE_AND_TOUR=${TENZIR_PLATFORM_DISABLE_LOCAL_DEMO_NODES}
      - PRIVATE_DRIZZLE_DATABASE_URL=postgres://${TENZIR_PLATFORM_POSTGRES_USER}:${TENZIR_PLATFORM_POSTGRES_PASSWORD}@${TENZIR_PLATFORM_POSTGRES_HOSTNAME}/${TENZIR_PLATFORM_POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"

volumes:
  postgres_data:
    driver: local
  seaweed_data:
    driver: local
