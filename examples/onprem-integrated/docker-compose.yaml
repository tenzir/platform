# Docker Compose setup for a platform deployment that integrates
# with existing local infrastructure, eg. a dedicated auth provider and
# a centrally managed database.
#
# Assumptions:
#
#  - An external identity provider exists and is configured
#    in the `.env` file:
#       TENZIR_PLATFORM_OIDC_PROVIDER_ISSUER_URL
#       TENZIR_PLATFORM_OIDC_PROVIDER_CLIENT_ID
#       TENZIR_PLATFORM_OIDC_PROVIDER_CLIENT_SECRET
#
#  - An external postgres database exists and is accessible
#    via TCP connection.
#       TENZIR_PLATFORM_POSTGRES_USER
#       TENZIR_PLATFORM_POSTGRES_PASSWORD
#       TENZIR_PLATFORM_POSTGRES_HOSTNAME
#       TENZIR_PLATFORM_POSTGRES_DB
#
#  - A reverse proxy is configured to terminate TLS for the
#    domains under which the platform is reachable.
#       TENZIR_PLATFORM_DOMAIN
#       TENZIR_PLATFORM_CONTROL_ENDPOINT
#       TENZIR_PLATFORM_BLOBS_ENDPOINT
#       TENZIR_PLATFORM_API_ENDPOINT      [only used by the CLI]

services:
  platform:
    image: ghcr.io/tenzir/platform:${TENZIR_PLATFORM_VERSION:-latest}
    command: ["tenant_manager/rest/server/local.py"]
    environment:
      - BASE_PATH=
      - GATEWAY_WS_ENDPOINT=${TENZIR_PLATFORM_CONTROL_ENDPOINT}
      - GATEWAY_HTTP_ENDPOINT=http://websocket-gateway:5000
      - TENZIR_DEMO_NODE_IMAGE=${TENZIR_PLATFORM_DEMO_NODE_IMAGE:-}
      - TENANT_MANAGER_APP_API_KEY=${TENZIR_PLATFORM_INTERNAL_APP_API_KEY}
      - TENANT_MANAGER_TENANT_TOKEN_ENCRYPTION_KEY=${TENZIR_PLATFORM_INTERNAL_TENANT_TOKEN_ENCRYPTION_KEY}
      - TENANT_MANAGER_AUTH__ENABLE_SELF_SIGNED=false
      - TENANT_MANAGER_AUTH__TRUSTED_AUDIENCES=${TENZIR_PLATFORM_OIDC_TRUSTED_AUDIENCES}
      - TENANT_MANAGER_AUTH__ADMIN_FUNCTIONS=${TENZIR_PLATFORM_OIDC_ADMIN_RULES}
      - STORE__TYPE=${TENZIR_PLATFORM_STORE_TYPE}
      - STORE__POSTGRES_URI=postgresql://${TENZIR_PLATFORM_POSTGRES_USER}:${TENZIR_PLATFORM_POSTGRES_PASSWORD}@${TENZIR_PLATFORM_POSTGRES_HOSTNAME}/${TENZIR_PLATFORM_POSTGRES_DB}
      # seaweedfs connection
      - TENANT_MANAGER_SIDEPATH_BUCKET_NAME=${TENZIR_PLATFORM_INTERNAL_BUCKET_NAME}
      - BLOB_STORAGE__ENDPOINT_URL=http://seaweed:8333
      - BLOB_STORAGE__PUBLIC_ENDPOINT_URL=${TENZIR_PLATFORM_BLOBS_ENDPOINT}
      - BLOB_STORAGE__ACCESS_KEY_ID=${TENZIR_PLATFORM_INTERNAL_ACCESS_KEY_ID}
      - BLOB_STORAGE__SECRET_ACCESS_KEY=${TENZIR_PLATFORM_INTERNAL_SECRET_ACCESS_KEY}
    depends_on:
      - websocket-gateway
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 5000:5000

  websocket-gateway:
    image: ghcr.io/tenzir/platform:${TENZIR_PLATFORM_VERSION:-latest}
    environment:
      - BASE_PATH=
      - TENZIR_PROXY_TIMEOUT=60
      - TENANT_MANAGER_APP_API_KEY=${TENZIR_PLATFORM_INTERNAL_APP_API_KEY}
      - TENANT_MANAGER_TENANT_TOKEN_ENCRYPTION_KEY=${TENZIR_PLATFORM_INTERNAL_TENANT_TOKEN_ENCRYPTION_KEY}
      - STORE__TYPE=${TENZIR_PLATFORM_STORE_TYPE}
      - STORE__POSTGRES_URI=postgresql://${TENZIR_PLATFORM_POSTGRES_USER}:${TENZIR_PLATFORM_POSTGRES_PASSWORD}@${TENZIR_PLATFORM_POSTGRES_HOSTNAME}/${TENZIR_PLATFORM_POSTGRES_DB}
    command: ["tenant_manager/ws/server/local.py"]
    ports:
      - 5001:5000

  app:
    image: ghcr.io/tenzir/app:${TENZIR_PLATFORM_VERSION:-latest}
    environment:
      AUTH_TRUST_HOST: true
      PUBLIC_ENABLE_HIGHLIGHT: false
      ORIGIN: ${TENZIR_PLATFORM_DOMAIN}
      PRIVATE_OIDC_PROVIDER_CLIENT_ID: ${TENZIR_PLATFORM_APP_CLIENT_ID}
      PRIVATE_OIDC_PROVIDER_CLIENT_SECRET: ${TENZIR_PLATFORM_APP_CLIENT_SECRET}
      PRIVATE_OIDC_PROVIDER_ISSUER_URL: ${TENZIR_PLATFORM_OIDC_PROVIDER_ISSUER_URL}
      PRIVATE_OIDC_PROVIDER_NAME: ${TENZIR_PLATFORM_OIDC_PROVIDER_NAME}
      PUBLIC_OIDC_PROVIDER_ID: ${TENZIR_PLATFORM_OIDC_PROVIDER_NAME}
      PRIVATE_USER_ENDPOINT: http://platform:5000/user
      PRIVATE_WEBAPP_ENDPOINT: http://platform:5000/webapp
      PRIVATE_WEBAPP_KEY: ${TENZIR_PLATFORM_INTERNAL_APP_API_KEY}
      AUTH_SECRET: ${TENZIR_PLATFORM_INTERNAL_AUTH_SECRET}
      PUBLIC_DISABLE_DEMO_NODE_AND_TOUR: true
    ports:
      - "3000:3000"

  # Note the ~25 seconds startup delay before the seaweed server
  # becomes ready.
  seaweed:
    image: ghcr.io/tenzir/tenzir-seaweedfs:${TENZIR_PLATFORM_VERSION:-latest}
    environment:
      - TENZIR_PLATFORM_INTERNAL_ACCESS_KEY_ID
      - TENZIR_PLATFORM_INTERNAL_SECRET_ACCESS_KEY
      - TENZIR_PLATFORM_INTERNAL_BUCKET_NAME
    command: ["server", "-dir=/var/lib/seaweedfs", "-s3", "-s3.config=/config.json"]
    volumes:
      - seaweed_data:/var/lib/seaweedfs
    ports:
      - '8333:8333'

  cli:
    image: ghcr.io/tenzir/tenzir-platform:${TENZIR_PLATFORM_VERSION:-latest}
    profiles:
      - donotstart
    volumes:
      - cli_cache:/cache/tenzir-platform
    environment:
      - XDG_CACHE_HOME=/cache/
      - TENZIR_PLATFORM_CLI_API_ENDPOINT=http://platform:5000/
      - TENZIR_PLATFORM_CLI_ISSUER_URL=${TENZIR_PLATFORM_OIDC_PROVIDER_ISSUER_URL}
      - TENZIR_PLATFORM_CLI_CLIENT_ID=${TENZIR_PLATFORM_CLI_CLIENT_ID}

volumes:
  seaweed_data:
    driver: local
  cli_cache:
    driver: local
